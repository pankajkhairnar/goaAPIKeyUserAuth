// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=goaAPIKeyUserAuth/design
// --out=$(GOPATH)/src/goaAPIKeyUserAuth
// --version=v1.1.0-dirty
//
// API "goaAPIKeyUserAuth": Application Contexts
//
// The content of this file is auto-generated, DO NOT MODIFY

package app

import (
	"github.com/goadesign/goa"
	"golang.org/x/net/context"
)

// InfoUserContext provides the user info action context.
type InfoUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewInfoUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller info action.
func NewInfoUserContext(ctx context.Context, service *goa.Service) (*InfoUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := InfoUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *InfoUserContext) OK(r *Userdataresponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.userdataresponse")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *InfoUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// LoginUserContext provides the user login action context.
type LoginUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewLoginUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller login action.
func NewLoginUserContext(ctx context.Context, service *goa.Service) (*LoginUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := LoginUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *LoginUserContext) OK(r *Loginresponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.loginresponse")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *LoginUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// LogoutUserContext provides the user logout action context.
type LogoutUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewLogoutUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller logout action.
func NewLogoutUserContext(ctx context.Context, service *goa.Service) (*LogoutUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := LogoutUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *LogoutUserContext) OK(r *Usercommonresponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.usercommonresponse")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *LogoutUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// RegisterUserContext provides the user register action context.
type RegisterUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewRegisterUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller register action.
func NewRegisterUserContext(ctx context.Context, service *goa.Service) (*RegisterUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := RegisterUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *RegisterUserContext) OK(r *Usercommonresponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.usercommonresponse")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}
